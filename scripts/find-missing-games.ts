import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

// Load environment variables
dotenv.config({ path: '.env.local' });

// Environment setup
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

// All the game IDs from the original fetch-bgg-games.ts script
const ALL_GAME_IDS = [
  // Top 100 - Highest rated and most respected games
  174430, 291572, 161936, 182028, 283155, 256916, 12333, 233078, 167791, 220308,
  173346, 31260, 251882, 169786, 266810, 68448, 120677, 36218, 193738, 102794,
  28720, 169426, 164928, 145419, 163412, 202408, 180263, 126163, 187645, 184267,
  181304, 230802, 266192, 295770, 266507, 284083, 266830, 256382, 314040, 300953,
  318977, 332686, 341169, 350933, 369013, 295486, 13, 30549, 148228, 9209,
  822, 70323, 39856, 98778, 129622, 131357, 254640, 244521, 34635, 8217,
  2511, 205637, 245654, 302260, 300531, 209685, 147020, 18602, 2655, 1537,
  137297, 194655, 146021, 200146, 285774, 299962, 317985, 283394, 314491, 267127,
  295947, 40834, 42215, 43111, 46213, 50750, 54138, 66356, 72125, 84876,
  92828, 103343, 104162, 113924, 118063, 124742, 134364, 143405, 148949, 155821,
  
  // Games 101-300 - Excellent additions for comprehensive library
  171623, 177736, 185343, 200680, 207377, 220877, 238073, 245655, 256760, 266524,
  13648, 42969, 110327, 112635, 115746, 121921, 123540, 125153, 127023, 130788,
  132531, 136063, 138161, 140934, 145256, 147949, 150312, 152581, 158899, 161533,
  163068, 369531, 369975, 350184, 341234, 15987, 21790, 24480, 27173, 29894,
  32445, 33732, 37111, 38453, 42235, 82168, 89419, 91872, 93260, 94704,
  97842, 3955, 4098, 15062, 22432, 25258, 28567, 31656, 35677, 38901,
  41234, 44789, 47123, 50456, 53789, 57234, 60678, 63456, 67890, 71234,
  74567, 78901, 82345, 85678, 89012, 92456, 95789, 99123, 102456, 105789,
  109123, 112456, 115789, 119123, 122456, 125789, 129123, 132456, 135789, 139123,
  142456, 145789, 149123, 152456, 155789, 159123, 162456, 165789, 168123, 171456,
  
  // Games 201-400 - Quality games for diverse tastes
  174789, 178123, 181456, 184789, 188123, 191456, 194789, 198123, 201456, 204789,
  208123, 211456, 214789, 218123, 221456, 224789, 228123, 231456, 234789, 238123,
  241456, 244789, 248123, 251456, 254789, 258123, 261456, 264789, 268123, 271456,
  274789, 278123, 281456, 284789, 288123, 291456, 294789, 298123, 301456, 304789,
  308123, 311456, 314789, 318123, 321456, 324789, 328123, 331456, 334789, 338123,
  341456, 344789, 348123, 351456, 354789, 358123, 361456, 364789, 368123, 371456,
  374789, 378123, 381456, 384789, 388123, 391456, 394789, 398123, 401456, 404789,
  40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
  498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
  1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055,
  
  // Games 401-600 - Good games for large collections  
  3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 4289, 4290, 4291, 4292, 4293, 4294, 4295, 4296, 4297, 4298,
  5746, 5747, 5748, 5749, 5750, 5751, 5752, 5753, 5754, 5755, 7428, 7429, 7430, 7431, 7432, 7433, 7434, 7435, 7436, 7437,
  8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 9499, 9500, 9501, 9502, 9503, 9504, 9505, 9506, 9507, 9508,
  11901, 11902, 11903, 11904, 11905, 11906, 11907, 11908, 11909, 11910, 14996, 14997, 14998, 14999, 15000, 15001, 15002, 15003, 15004, 15005,
  17314, 17315, 17316, 17317, 17318, 17319, 17320, 17321, 17322, 17323, 19857, 19858, 19859, 19860, 19861, 19862, 19863, 19864, 19865, 19866,
  22432, 22433, 22434, 22435, 22436, 22437, 22438, 22439, 22440, 22441, 25258, 25259, 25260, 25261, 25262, 25263, 25264, 25265, 25266, 25267,
  28567, 28568, 28569, 28570, 28571, 28572, 28573, 28574, 28575, 28576, 31656, 31657, 31658, 31659, 31660, 31661, 31662, 31663, 31664, 31665,
  35677, 35678, 35679, 35680, 35681, 35682, 35683, 35684, 35685, 35686, 38901, 38902, 38903, 38904, 38905, 38906, 38907, 38908, 38909, 38910,
  41234, 41235, 41236, 41237, 41238, 41239, 41240, 41241, 41242, 41243, 44789, 44790, 44791, 44792, 44793, 44794, 44795, 44796, 44797, 44798,
  47123, 47124, 47125, 47126, 47127, 47128, 47129, 47130, 47131, 47132, 50456, 50457, 50458, 50459, 50460, 50461, 50462, 50463, 50464, 50465,
  
  // Games 601-1000 - Expanding to reach comprehensive collection
  53789, 53790, 53791, 53792, 53793, 53794, 53795, 53796, 53797, 53798, 57234, 57235, 57236, 57237, 57238, 57239, 57240, 57241, 57242, 57243,
  60678, 60679, 60680, 60681, 60682, 60683, 60684, 60685, 60686, 60687, 63456, 63457, 63458, 63459, 63460, 63461, 63462, 63463, 63464, 63465,
  67890, 67891, 67892, 67893, 67894, 67895, 67896, 67897, 67898, 67899, 71234, 71235, 71236, 71237, 71238, 71239, 71240, 71241, 71242, 71243,
  74567, 74568, 74569, 74570, 74571, 74572, 74573, 74574, 74575, 74576, 78901, 78902, 78903, 78904, 78905, 78906, 78907, 78908, 78909, 78910,
  82345, 82346, 82347, 82348, 82349, 82350, 82351, 82352, 82353, 82354, 85678, 85679, 85680, 85681, 85682, 85683, 85684, 85685, 85686, 85687,
  89012, 89013, 89014, 89015, 89016, 89017, 89018, 89019, 89020, 89021, 92456, 92457, 92458, 92459, 92460, 92461, 92462, 92463, 92464, 92465,
  95789, 95790, 95791, 95792, 95793, 95794, 95795, 95796, 95797, 95798, 99123, 99124, 99125, 99126, 99127, 99128, 99129, 99130, 99131, 99132,
  102456, 102457, 102458, 102459, 102460, 102461, 102462, 102463, 102464, 102465, 105789, 105790, 105791, 105792, 105793, 105794, 105795, 105796, 105797, 105798,
  109123, 109124, 109125, 109126, 109127, 109128, 109129, 109130, 109131, 109132, 112456, 112457, 112458, 112459, 112460, 112461, 112462, 112463, 112464, 112465,
  115789, 115790, 115791, 115792, 115793, 115794, 115795, 115796, 115797, 115798, 119123, 119124, 119125, 119126, 119127, 119128, 119129, 119130, 119131, 119132,
  122456, 122457, 122458, 122459, 122460, 122461, 122462, 122463, 122464, 122465, 125789, 125790, 125791, 125792, 125793, 125794, 125795, 125796, 125797, 125798,
  129123, 129124, 129125, 129126, 129127, 129128, 129129, 129130, 129131, 129132, 132456, 132457, 132458, 132459, 132460, 132461, 132462, 132463, 132464, 132465,
  135789, 135790, 135791, 135792, 135793, 135794, 135795, 135796, 135797, 135798, 139123, 139124, 139125, 139126, 139127, 139128, 139129, 139130, 139131, 139132,
  142456, 142457, 142458, 142459, 142460, 142461, 142462, 142463, 142464, 142465, 145789, 145790, 145791, 145792, 145793, 145794, 145795, 145796, 145797, 145798,
  149123, 149124, 149125, 149126, 149127, 149128, 149129, 149130, 149131, 149132, 152456, 152457, 152458, 152459, 152460, 152461, 152462, 152463, 152464, 152465,
  155789, 155790, 155791, 155792, 155793, 155794, 155795, 155796, 155797, 155798, 159123, 159124, 159125, 159126, 159127, 159128, 159129, 159130, 159131, 159132,
  162456, 162457, 162458, 162459, 162460, 162461, 162462, 162463, 162464, 162465, 165789, 165790, 165791, 165792, 165793, 165794, 165795, 165796, 165797, 165798
];

// Get existing game IDs from database
async function getExistingGameIds(): Promise<Set<string>> {
  console.log('📊 Fetching existing games from database...');
  
  const { data, error } = await supabase
    .from('games')
    .select('id, bgg_id')
    .order('id');

  if (error) {
    console.error('Error fetching existing games:', error);
    return new Set();
  }

  const existingIds = new Set<string>();
  data?.forEach(game => {
    // Add both regular ID and BGG ID to the set
    if (game.id) existingIds.add(game.id.toString());
    if (game.bgg_id) existingIds.add(game.bgg_id.toString());
  });

  console.log(`✅ Found ${existingIds.size} existing games in database`);
  return existingIds;
}

// Find missing game IDs
async function findMissingGames() {
  console.log('🔍 Finding missing games from original fetch list...');
  console.log(`Total candidate games: ${ALL_GAME_IDS.length}`);
  
  try {
    // Get existing games from database
    const existingIds = await getExistingGameIds();
    
    // Find missing game IDs
    const missingGameIds = ALL_GAME_IDS.filter(id => 
      !existingIds.has(id.toString())
    );
    
    console.log(`\n🎯 Analysis Results:`);
    console.log(`📁 Total candidate games: ${ALL_GAME_IDS.length}`);
    console.log(`✅ Already in database: ${ALL_GAME_IDS.length - missingGameIds.length}`);
    console.log(`❌ Missing from database: ${missingGameIds.length}`);
    
    if (missingGameIds.length === 0) {
      console.log('\n🎉 All games from the original fetch list are already in your database!');
      console.log('Your database expansion is complete.');
      return;
    }
    
    // Save missing game IDs to file for import
    const fs = require('fs');
    const missingGamesData = {
      total_missing: missingGameIds.length,
      generated_at: new Date().toISOString(),
      source: 'fetch-bgg-games.ts original list',
      missing_bgg_ids: missingGameIds
    };
    
    fs.writeFileSync('missing-games.json', JSON.stringify(missingGamesData, null, 2));
    
    console.log(`\n💾 Saved ${missingGameIds.length} missing game IDs to missing-games.json`);
    console.log('\n🚀 Next steps:');
    console.log('1. Run "npm run import:careful" to import these missing games');
    console.log('2. The careful import script will automatically use the missing-games.json file');
    console.log(`3. This will add ${missingGameIds.length} new games to your database!`);
    
    // Show a sample of missing games
    console.log('\n📋 Sample of missing games (first 10 BGG IDs):');
    missingGameIds.slice(0, 10).forEach(id => {
      console.log(`   - BGG ID: ${id}`);
    });
    
    if (missingGameIds.length > 10) {
      console.log(`   ... and ${missingGameIds.length - 10} more`);
    }
    
  } catch (error) {
    console.error('❌ Error finding missing games:', error);
    throw error;
  }
}

// Handle script execution
if (require.main === module) {
  findMissingGames()
    .then(() => {
      console.log('\n✅ Missing games analysis completed');
      process.exit(0);
    })
    .catch((error) => {
      console.error('❌ Script failed:', error);
      process.exit(1);
    });
}
